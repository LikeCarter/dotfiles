#!/usr/bin/env bash

# Generate a secret
function secret() {
	LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 32 ; echo ''
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function colormap() {
  for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
}

function aws.print-all-instances() {
  REGIONS=`aws ec2 describe-regions --region us-east-1 --output text --query Regions[*].[RegionName]`
  for REGION in $REGIONS
  do
    echo -e "\nInstances in '$REGION'..";
    aws ec2 describe-instances --region $REGION | \
      jq '.Reservations[].Instances[] | "EC2: \(.InstanceId): \(.State.Name)"'
  done
}


function ghpra() {
  echo "Enter a prefix for the PR title (e.g. fix)"
  read -r PREFIX
  echo "Creating PR with prefix: $PREFIX"

  # GitHub to Slack username mapping
  declare -A gh_to_slack=(
    ["<GH_USERNAME>"]="<SLACK_DISPLAYNAME>"
    ["<GH_USERNAME>"]="<SLACK_DISPLAYNAME>"
  )

  # Randomly select code owners
  frontend=$(shuf -e GH_USERNAME GH_USERNAME -n 1)
  backend=$(shuf -e GH_USERNAME GH_USERNAME -n 1)
  infra=$(shuf -e GH_USERNAME GH_USERNAME -n 1)
  migration="<GH_USERNAME>"
  other="<GH_USERNAME>"

  declare -a reviewers

  # Determine modified directories and assign reviewers
  git diff --name-only HEAD HEAD~1 | while read -r file; do
    case "$file" in
      frontend/*) reviewers+=("$frontend") ;;
      api/*) reviewers+=("$backend") ;;
      migration/*) reviewers+=("$migration") ;;
      .github/*) reviewers+=("$infra") ;;
    esac
  done

  # Remove duplicate reviewers
  reviewers=($(printf "%s\n" "${reviewers[@]}" | sort -u))

  assignee=$(IFS=,; echo "${reviewers[*]}")
  title="$PREFIX: $(git symbolic-ref --short HEAD)"

  echo "Generated PR title: $title"
  echo "Reviewers: $assignee"

  git push

  # Check if a PR already exists
  existing_pr=$(gh pr list --base main --head "$(git rev-parse --abbrev-ref HEAD)" --json url --jq '.[0].url')

  if [[ -n "$existing_pr" ]]; then
    echo "PR already exists: $existing_pr"
    echo "Copy and paste the following in Slack:"
    echo "[$title]($existing_pr)"
  else
    output=$(gh pr create --fill --title="$title" --reviewer "$assignee" --assignee "$assignee")
    echo "PR created: $output"
    echo "Copy and paste the following in Slack:"
    echo "[$title]($output)"
  fi

  # Notify reviewers on Slack
  for reviewer in "${reviewers[@]}"; do
    slack_name="${gh_to_slack[$reviewer]}"
    [[ -n "$slack_name" ]] && echo "@$slack_name"
  done
}

standup() {
    git for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)' refs/heads/ | \
    grep "$(date -v-1d +"%Y-%m-%d")" | \
    cut -d' ' -f2 | \
    grep -E 'eng-[0-9]{5}' | \
    awk '
    {
        branch=$0;
        if (match(branch, /eng-[0-9]{5}/)) {
            ticket=substr(branch, RSTART, RLENGTH); # Extract eng-XXXXX
            gsub(/eng-/, "ENG-", ticket); # Convert to uppercase ENG-XXXXX
            print "[" branch "](https://linear.app/secoda/issue/" ticket ")";
        }
    }'
}
